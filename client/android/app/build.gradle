def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
} else {
    throw new FileNotFoundException('local.properties not found, ensure app is built via Flutter')
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
def flutterVersionName = localProperties.getProperty('flutter.versionName')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Crashlytics
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId 'org.who.WHOMyHealth'
        minSdkVersion 16
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions 'server'

    // "hack", "prod" and "staging" flavors, based on:
    // https://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b
    productFlavors {
        hack {
            dimension 'server'
            versionNameSuffix '-hack'
        }
        prod {
            dimension 'server'
        }
        staging {
            dimension 'server'
            versionNameSuffix '-staging'
            getIsDefault().set(true)  // Default Flavor
        }
    }

    // Bundle and Apk copied to expected location for all variants
    // TODO: remove once fixed: https://github.com/flutter/flutter/issues/65264
    // Based on: https://github.com/flutter/flutter/issues/65264#issuecomment-707013948
    applicationVariants.all { variant ->
        variant.outputs.all {
            def taskSuffix = variant.name.capitalize()

            def bundleTaskName = "bundle${taskSuffix}"
            if (tasks.findByName(bundleTaskName)) {
                def copyAABTask = tasks.create(name: "copyAndRenameAab${taskSuffix}", type: Copy) {
                    // Cmd:     flutter build appbundle --release --flavor prod
                    // Depends: bundleProdRelease
                    // Task:    copyAndRenameAabProdRelease
                    // Src:     build/app/outputs/bundle/prodRelease/app-prod-release.aab
                    // Dst:     build/app/outputs/bundle/release/app.aab
                    def bundleBuildDir = "${buildDir}/outputs/bundle"
                    def originalDirPath = "${variant.productFlavors.name.join()}${variant.buildType.name}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
                    from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    into "${bundleBuildDir}/${variant.buildType.name}/"
                    rename ("${originalFileName}", "app.aab")
                }
                tasks[bundleTaskName].finalizedBy = [copyAABTask]
            }

            def apkTaskName = "assemble${taskSuffix}"
            if (tasks.findByName(apkTaskName)) {
                def copyApkTask = tasks.create(name: "copyAndRenameApk${taskSuffix}", type: Copy) {
                    // Cmd:     flutter build apk --flavor prod --release
                    // Depends: assembleProdRelease (builds the apk)
                    // Task:    copyAndRenameApkProdRelease
                    // Src:     build/app/outputs/apk/prod/release/app-prod-release.apk
                    // Dst:     build/app/outputs/apk/release/app-release.apk
                    def bundleBuildDir = "${buildDir}/outputs/apk"
                    def originalDirPath = "${variant.productFlavors.name.join()}/${variant.buildType.name}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.apk"
                    from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    into "${bundleBuildDir}/${variant.buildType.name}/"
                    rename ("${originalFileName}", "app-${variant.buildType.name}.apk")
                }
                tasks[apkTaskName].finalizedBy = [copyApkTask]
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
