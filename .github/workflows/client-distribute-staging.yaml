name: Client Distribute to Staging
on:
  push:
    # FIXME: Uncomment the `branches` line before submitting.
    # It is needed as a comment for me to test this.
    # Master branch has the staging firebase config.
    # branches: [ master ]
    paths:
      - '.github/workflows/**'
      - 'api/**'
      - 'client/app/**'
      - 'client/flutter/**'
      - 'content/**'


jobs:
  build_apk:
    # Firebase requires fat APKs, not AABs, so this workflow is separate from client-build.
    name: Build Android APK (Staging)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - run: git clone https://github.com/flutter/flutter.git --depth 1 -b 1.17.4 _flutter
      - run: echo "::add-path::$GITHUB_WORKSPACE/_flutter/bin"
      - run: flutter pub get
        working-directory: ./client/app
      - run: flutter build apk
        working-directory: ./client/app
      - run: git diff --exit-code
      - name: Upload Staging APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: staging-apk
          path: ./client/app/build/app/outputs/apk/release/app-release.apk
  deploy_to_firebase_staging:
    name: Deploy APK to Firebase App Distribution (Staging)
    needs: build_apk
    steps:
      - name: Download Staging APK Artifact
        uses: actions/download-artifact@v2
        with:
          name: staging-apk
      - name: Install Firebase CLI
        shell: bash
        run: curl -sL https://firebase.tools | bash
      - name: Setup Firebase Credentials
        shell: bash
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$TMP_CREDS_FILE"
          echo "$BASE64_KEY_JSON" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
        env:
          TMP_CREDS_FILE: "${{ runner.temp }}/fbappdeploy.json"
          BASE64_KEY_JSON: "${{ secrets.FIREBASE_APPDEPLOY_STAGING_SVCACCT_JSON }}"
      - name: Run Firebase App Distribution
        run: firebase appdistribution:distribute --app "$FIREBASE_STAGING_APP_ID" --groups "every-build" ./app-release.apk
        env:
          FIREBASE_STAGING_APP_ID: "${{ secrets.FIREBASE_STAGING_APP_ID }}"
      - name: Destroy Firebase Credentials
        run: rm $GOOGLE_APPLICATION_CREDENTIALS
        if: ${{ always() }}
